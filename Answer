#include <iostream>
#include <vector>
#include <cmath>

using namespace std;

bool check_T_Prime(int num) {
    int divisors = 0;
    int i;
    for (i = 1; i * i <= num; i++) {//check up to the square root of the number
        if (num % i == 0 && i*i != num)                 //if the number is divisible by i then add 2..why 2? 
        divisors += 2;                             //Assume there exist x,y in Z+, such that x*y = num. Therefore,
        if (i * i == num)                           // y|num & x|num. that's why we added 2 instead of looping over the whole array
        divisors++;// here, if we reached the case where x=y, x*x = num, meaning that there is only one divisor.
    }
    
    return divisors == 3;//return true only when the divisors = 3
}

int main() {
    int n;
    cin >> n;
    vector<int> array(n);
    for (int i = 0; i < n; i++) {
        cin >> array[i];
        
    }
    for (int i = 0; i < n; i++) {
        if (check_T_Prime(array[i])) {
            cout << "YES\n";
        } 
        else {
            cout << "NO\n";
            
        }
        
    }
return 0;
}
/* Time Analysis:
the check_T_Prime takes O(sqrt(num)), and it is inside a loop that takes O(n). so the total time complexity would be O(n*sqrt(num))
where n is the number of elemnts in the vector, and num is the number given as an argument to the check function */
